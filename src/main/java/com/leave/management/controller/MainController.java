/**
 * 
 */
package com.leave.management.controller;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.leave.management.entity.EmpLeave;
import com.leave.management.entity.Employee;
import com.leave.management.repo.EmpLeaveRepo;
import com.leave.management.repo.EmployeeRepo;

/**
 * @author t_pnjeru
 *
 */
@Controller    // This means that this class is a Controller
@RequestMapping(path="/leave") // This means URL's start with /leave (after Application path)
public class MainController {

	@Autowired 
	// This means to get the bean called EmployeeRepo
	// Which is auto-generated by Spring, we will use it to handle the data
	EmployeeRepo empRepo;
	@Autowired 
	EmpLeaveRepo empLeaveRepo;

	@GetMapping(path="/addEmp") // Map ONLY GET Requests
	public @ResponseBody String addEmployee (
			@RequestParam String name,
			@RequestParam String email,
			@RequestParam String mobile,
			@RequestParam String address,
			@RequestParam String dob) {
		//  /addEmp?name=test&email=email&mobile=mobile&address=address&dob=dob
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Date last_update = new Date(System.currentTimeMillis());
		Date created_on = new Date(System.currentTimeMillis());
		Employee employee = new Employee(name, email, mobile, address, dob, last_update, created_on);
		empRepo.save(employee);
		return "Saved";
	}

	@GetMapping(path="/allEmp")
	public @ResponseBody Iterable<Employee> getEmployees() {
		// This returns a JSON or XML with the Employees
		return empRepo.findAll();
	}

	////@RequestParam(name = 'dateTime') @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm") LocalDateTime dateTime
	@GetMapping(path="/scheduleLeave") // Map ONLY GET Requests
	public @ResponseBody String scheduleLeave (
			@RequestParam Integer emp_id,
			@RequestParam String leave_reason,
			@RequestParam String  start_on,
			@RequestParam String end_on,
			@RequestParam Integer balance_days) {

		Date start_on2 = strToDate(start_on);
		Date end_on2 = strToDate(end_on);
	
		long days = ChronoUnit.DAYS.between(toLocalDateTime(start_on2), toLocalDateTime(end_on2)); 

		Date created_on = new Date(System.currentTimeMillis());
		EmpLeave empLeave = new EmpLeave(emp_id, leave_reason + " days appllied for " + days, start_on2, end_on2, balance_days, created_on);
		empLeaveRepo.save(empLeave);

		return "Scheduled";
	}
	
	public LocalDateTime toLocalDateTime(Date dateToConvert) {
	    return dateToConvert.toInstant()
	      .atZone(ZoneId.systemDefault())
	      .toLocalDateTime();
	}

	/**
	 * @param start_on
	 * @return
	 */
	private Date strToDate(String start_on) {
		Date start_on2 = new Date(System.currentTimeMillis()); 
		try {
			start_on2 = new SimpleDateFormat("dd-MM-yyyy").parse(start_on);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return start_on2;
	}

	@GetMapping(path="/getLeaveById")
	public @ResponseBody Optional<EmpLeave> getEmpLeave(@RequestParam int id) {
		// This returns a JSON or XML with the EmpLeaves
		return empLeaveRepo.findById(id); 
	}

	@GetMapping(path="/getLeaveByEmp")
	public @ResponseBody List<EmpLeave> getEmpLeaveByEmpId(@RequestParam int empId) {
		// This returns a JSON or XML with the EmpLeaves
		return empLeaveRepo.findByEmpId(empId); 
	}

}
